[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Akmal Fadhlurrahman",
    "section": "",
    "text": "As a Data Scientist at Bank UOB Indonesia, I excel at bridging the gap between data and actionable insights. My expertise spans diverse areas like banking, credit cards, BNPL, e-money, remittance, and microfinance, allowing me to delve deep and uncover valuable trends. But my journey doesn’t stop there. I believe in the power of clear communication, honed through public speaking engagements and Python bootcamp instruction. This unique blend allows me to translate intricate data stories into engaging narratives that resonate with both technical and non-technical audiences, empowering informed decision-making across the organization.\n(Yes this paragraph was edited with help of Generative AI tools.)"
  },
  {
    "objectID": "about.html#one-paragraph-about-me",
    "href": "about.html#one-paragraph-about-me",
    "title": "Akmal Fadhlurrahman",
    "section": "",
    "text": "As a Data Scientist at Bank UOB Indonesia, I excel at bridging the gap between data and actionable insights. My expertise spans diverse areas like banking, credit cards, BNPL, e-money, remittance, and microfinance, allowing me to delve deep and uncover valuable trends. But my journey doesn’t stop there. I believe in the power of clear communication, honed through public speaking engagements and Python bootcamp instruction. This unique blend allows me to translate intricate data stories into engaging narratives that resonate with both technical and non-technical audiences, empowering informed decision-making across the organization.\n(Yes this paragraph was edited with help of Generative AI tools.)"
  },
  {
    "objectID": "about.html#work-experiences",
    "href": "about.html#work-experiences",
    "title": "Akmal Fadhlurrahman",
    "section": "Work Experiences",
    "text": "Work Experiences\n\n\n\n\n\n\n\n\nEmployer\nPosition\nFrom - To\n\n\n\n\nBank UOB Indonesia\nData Scientist\nNov 2023 - present\n\n\nCitibank Indonesia\n(bought by UOB Indonesia in Nov 2023)\nBusiness Analytics / Data Scientist\nMay 2022 - Nov 2023\n\n\nVirgo\nBusiness Analyst\nDec 2020 - May 2022\n\n\nHome Credit Indonesia\nBig Data Analyst\nFeb 2019 - Dec 2020\n\n\nBank CIMB Niaga\nDecision Management Analytic Specialist\nJul 2018 - Feb 2019"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Akmal Fadhlurrahman",
    "section": "Education",
    "text": "Education\n\n\n\n\n\n\n\n\nInstitution\nDegree\nGraduation Year\n\n\n\n\nBarcelona GSE\n(now Barcelona School of Economics)\nMaster in Economics & Finance\nGPA: 7.2\n2017\n\n\nInstitut Teknologi Bandung\nBSc in Mathematics\nGPA: 3.55\n2015"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "This is my first post for this website. Let me see if this works.",
    "section": "",
    "text": "This is my first post for this website. Let me see if this works."
  },
  {
    "objectID": "posts/welcome/index.html#technology",
    "href": "posts/welcome/index.html#technology",
    "title": "This is my first post for this website. Let me see if this works.",
    "section": "Technology",
    "text": "Technology\nThis website is build with Quarto through RStudio Desktop, with the static page stored in Github and served through Netlify.\n(Hey the link works!)\nJust like any other blogging platform, it can insert pictures:"
  },
  {
    "objectID": "posts/welcome/index.html#scientific-publishing",
    "href": "posts/welcome/index.html#scientific-publishing",
    "title": "This is my first post for this website. Let me see if this works.",
    "section": "Scientific Publishing",
    "text": "Scientific Publishing\nBut what makes Quarto special is that it is a scientific and technical publishing system; so naturally it allow code highlighting:\nfor i in range(3):\n  print(i)\n(even if the syntax highlighter is not available for all language of interest, for example, SAS syntax support is missing):\nproc sql;\ncreate table something as\nselect * from nothing;\nquit;\nBeyond just highlighting, Quarto can run Python and R codes and store the result with ease with reticulate package, like so:\n\nimport pandas as pd\nimport numpy as np\n\nfor i in range(3):\n  print(i+1)\n\n1\n2\n3\n\n\n\nfor (x in 1:3) {\n  print(x)\n}\n\n[1] 1\n[1] 2\n[1] 3"
  },
  {
    "objectID": "posts/welcome/index.html#math",
    "href": "posts/welcome/index.html#math",
    "title": "This is my first post for this website. Let me see if this works.",
    "section": "Math",
    "text": "Math\nIt can also support \\(math\\), like so inline: \\(x = \\dfrac{-b \\pm \\sqrt{b^2-4ac}}{2a}\\) or the display one: \\[\n\\int_0^\\infty e^{-x^2}\\: dx = \\dfrac{\\sqrt{\\pi}}{2}\n\\]\nAnd as you can see in the About page (why this one is very hard?), we can also cross-linking and do tables.\nEmployer\n\n\n\n\nPosition\nFrom - To\n\n\n\n\nBank UOB Indonesia\nData Scientist\nNov 2023 - present"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Posts",
    "section": "",
    "text": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow\n\n\n\n\n\n\ndata-science\n\n\ntensorflow-certification\n\n\n\n\n\n\n\n\n\nApr 8, 2024\n\n\nAkmal Fadhlurrahman\n\n\n\n\n\n\n\n\n\n\n\n\nThis is my first post for this website. Let me see if this works.\n\n\n\n\n\n\ntechnology\n\n\n\n\n\n\n\n\n\nFeb 22, 2024\n\n\nAkmal Fadhlurrahman\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html",
    "href": "posts/learn-tensorflow-1/index.html",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "",
    "text": "Kenapa tiba-tiba muncul ide untuk buat blogpost tentang TensorFlow?\nJawabannya: sesungguhnya saya mendapatkan voucher sertifikasi TensorFlow Developer gratis dari Bangkit Academy (bernilai US$100) karena pernah menjadi kontributor di sana untuk beberapa sesi.\n\nDan oleh karena itu saya perlu mempelajari seluk-beluk pemrograman TensorFlow sebelum voucher tersebut kadaluarsa pada akhir Mei 2024 (tinggal 2 bulan lagi ketika blog ini ditulis…).\n\nDan sejujurnya selama karir saya sebagai data scientist, saya belum mendalami teknik-teknik deep learning dengan seksama, apalagi dengan menggunakan library TensorFlow. (Saya belajar dengan library scikit-learn dan yang mirip-mirip dengan scikit-learn).\nJadi saya kemudian membeli tiga course dariUdemy: TensorFlow Developer Certificate Bootcamp, TensorFlow 2.0: Deep Learning and Artificial Intelligence, dan A Deep Understanding of Deep Learning lalu mulai belajar dari dasar-dasarnya. (Semoga dapat reimburse dari kantor, amin!)\nTapi kemudian course-course itu gak ditonton dan/atau diterapkan selama 2 bulan :) Padahal waktu belajarnya cuman 4 bulan :))\nJadi supaya ada progress, akhirnya dicobalah untuk learn in public: secara periodik nulis “laporan” yang dishare di publik, supaya jadi motivasi belajar.\n\n\nBlog ini akan dipecah menjadi 5 bagian sesuai dengan silabus ujian Tensorflow Developer\n\nTensorFlow developer skills (blog ini)\nMembuat model neural network dengan TensorFlow 2.x\nKlasifikasi gambar (image classification)\nPemrosesan bahasa alami (natural language processing/NLP)\nModel runtun waktu, barisan, dan peramalan (time series, sequences, and predictions) –&gt; ini emang terjemahannya bener ya??"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html#rencana-learninpublic",
    "href": "posts/learn-tensorflow-1/index.html#rencana-learninpublic",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "Rencana #LearnInPublic",
    "text": "Rencana #LearnInPublic\nBlog ini akan dipecah menjadi 5 bagian sesuai dengan silabus ujian Tensorflow Developer\n\nTensorFlow developer skills (blog ini)\nMembuat model neural network dengan TensorFlow 2.x\nKlasifikasi gambar (image classification)\nPemrosesan bahasa alami (natural language processing/NLP)\nModel runtun waktu, barisan, dan peramalan (time series, sequences, and predictions) –&gt; ini emang terjemahannya bener ya??"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html#membuat-tensor",
    "href": "posts/learn-tensorflow-1/index.html#membuat-tensor",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "Membuat Tensor",
    "text": "Membuat Tensor\nUntuk membuat tensor, kita bisa menggunakan tf.constant()\n\na = tf.constant(1)\nb = tf.constant([1, 2])\nc = tf.constant([\n  [1,2],\n  [3,4]\n])\nd = tf.constant([\n  [\n    [1,2],\n    [3,4]\n  ],\n  [\n    [5,6],\n    [7,8]\n  ]\n])\n\n\nprint(a) # Skalar\nprint(b) # Vektor\nprint(c) # Matriks\nprint(d) # Tumpukan matriks\n\ntf.Tensor(1, shape=(), dtype=int32)\ntf.Tensor([1 2], shape=(2,), dtype=int32)\ntf.Tensor(\n[[1 2]\n [3 4]], shape=(2, 2), dtype=int32)\ntf.Tensor(\n[[[1 2]\n  [3 4]]\n\n [[5 6]\n  [7 8]]], shape=(2, 2, 2), dtype=int32)\n\n\nKadangkala kita perlu membuat tensor dengan isi nol semua, kita bisa menggunakan tf.zeros:\n\nrank4 = tf.zeros(shape=[2,3,4,5])\nrank4\n\n&lt;tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=\narray([[[[0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.]],\n\n        [[0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.]],\n\n        [[0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.]]],\n\n\n       [[[0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.]],\n\n        [[0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.]],\n\n        [[0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0.]]]], dtype=float32)&gt;\n\n\natau untuk membangkitkan tensor acak, gunakan tf.random.Generator\n\nrandom1 = tf.random.Generator.from_seed(39209)\nrandom1 = random1.normal(shape=(3,2))\nprint(random1)\n\ntf.Tensor(\n[[ 0.43202025  0.88672817]\n [-1.2629851   0.4553509 ]\n [ 0.6588549   1.129419  ]], shape=(3, 2), dtype=float32)"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html#membuat-variable",
    "href": "posts/learn-tensorflow-1/index.html#membuat-variable",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "Membuat Variable",
    "text": "Membuat Variable\nSelain Tensor, terdapat jenis data lain yang ada di TF, yakni Variable. Sesuai namanya, Variable adalah Tensor yang nilainya dapat diubah-ubah dengan menggunakan metode .assign()\n\nchangeable_tensor = tf.Variable([10, 7])\nprint(changeable_tensor)\n\n&lt;tf.Variable 'Variable:0' shape=(2,) dtype=int32, numpy=array([10,  7], dtype=int32)&gt;\n\n\n\nchangeable_tensor.assign([3, 5])\n\n&lt;tf.Variable 'UnreadVariable' shape=(2,) dtype=int32, numpy=array([3, 5], dtype=int32)&gt;\n\n\nVariable digunakan oleh TensorFlow salah satunya untuk melakukan diferensiasi (menghitung \\(\\dfrac{\\partial f}{\\partial w_i}\\)) dan menyimpan nilai bobot (\\(w_i\\)) ketika training model.\nNamun apabila kita memiliki Variable yang tidak perlu di-train (misal: step counter), maka kita bisa menyetel variable sebagai non-trainable, contoh:\n\nstep_counter = tf.Variable(1, trainable=False)"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html#melihat-informasi-tensor",
    "href": "posts/learn-tensorflow-1/index.html#melihat-informasi-tensor",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "Melihat Informasi Tensor",
    "text": "Melihat Informasi Tensor\nSeperti array Numpy, kita bisa menarik beberapa informasi seputar tensor:\n\nprint(rank4.dtype) # Tipe data dtype di tensor rank4\nprint(rank4.shape) # Bentuk data tensor\nprint(rank4.ndim)  # Jumlah dimensi tensor (karena datanya berbentuk 2x3x4x5 --&gt; 4 dimensi)\nprint(tf.size(rank4).numpy()) # Karena bentuk datanya 2x3x4x5 maka terdapat 120 item dalam tensor rank4\n\n&lt;dtype: 'float32'&gt;\n(2, 3, 4, 5)\n4\n120"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html#manipulasi-tensor",
    "href": "posts/learn-tensorflow-1/index.html#manipulasi-tensor",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "Manipulasi Tensor",
    "text": "Manipulasi Tensor\nKita juga menggunakan indexing untuk melihat sebagian dari tensor, misal:\n\n# Get the first 2 elements of each dimension\nrank4[:1, :3, :2, :2]\n\n&lt;tf.Tensor: shape=(1, 3, 2, 2), dtype=float32, numpy=\narray([[[[0., 0.],\n         [0., 0.]],\n\n        [[0., 0.],\n         [0., 0.]],\n\n        [[0., 0.],\n         [0., 0.]]]], dtype=float32)&gt;\n\n\nDan apabila diperlukan, kita bisa menambahkan dimensi baru dari tensor existing dengan menggunakan tf.newaxis:\n\n# Crate a r2x2 tensor (2 dimensions)\nrank2 = tf.constant([[10, 3],\n                     [2, 5]])\n                     \n# Add in extra dimension to our rank 2 tensor toi make 2x2x1 tensor\nrank3_exp = rank2[..., tf.newaxis]\nrank3_exp\n\n&lt;tf.Tensor: shape=(2, 2, 1), dtype=int32, numpy=\narray([[[10],\n        [ 3]],\n\n       [[ 2],\n        [ 5]]], dtype=int32)&gt;\n\n\nApabila diperlukan, kita juga bisa melakukan kebalikannya: Menghilangkan semua single dimensions dengan fungsi tf.squeeze():\n\n# Create a tensor to get started\ntf.random.set_seed(42)\nG = tf.constant(tf.random.uniform(shape=[50]), shape=(1,1,1,2,25))\nG\n\n&lt;tf.Tensor: shape=(1, 1, 1, 2, 25), dtype=float32, numpy=\narray([[[[[0.6645621 , 0.44100678, 0.3528825 , 0.46448255, 0.03366041,\n           0.68467236, 0.74011743, 0.8724445 , 0.22632635, 0.22319686,\n           0.3103881 , 0.7223358 , 0.13318717, 0.5480639 , 0.5746088 ,\n           0.8996835 , 0.00946367, 0.5212307 , 0.6345445 , 0.1993283 ,\n           0.72942245, 0.54583454, 0.10756552, 0.6767061 , 0.6602763 ],\n          [0.33695042, 0.60141766, 0.21062577, 0.8527372 , 0.44062173,\n           0.9485276 , 0.23752594, 0.81179297, 0.5263394 , 0.494308  ,\n           0.21612847, 0.8457197 , 0.8718841 , 0.3083862 , 0.6868038 ,\n           0.23764038, 0.7817228 , 0.9671384 , 0.06870162, 0.79873943,\n           0.66028714, 0.5871513 , 0.16461694, 0.7381023 , 0.32054043]]]]],\n      dtype=float32)&gt;\n\n\n\nG_squeezed = tf.squeeze(G)\nG_squeezed, G_squeezed.shape\n\n(&lt;tf.Tensor: shape=(2, 25), dtype=float32, numpy=\n array([[0.6645621 , 0.44100678, 0.3528825 , 0.46448255, 0.03366041,\n         0.68467236, 0.74011743, 0.8724445 , 0.22632635, 0.22319686,\n         0.3103881 , 0.7223358 , 0.13318717, 0.5480639 , 0.5746088 ,\n         0.8996835 , 0.00946367, 0.5212307 , 0.6345445 , 0.1993283 ,\n         0.72942245, 0.54583454, 0.10756552, 0.6767061 , 0.6602763 ],\n        [0.33695042, 0.60141766, 0.21062577, 0.8527372 , 0.44062173,\n         0.9485276 , 0.23752594, 0.81179297, 0.5263394 , 0.494308  ,\n         0.21612847, 0.8457197 , 0.8718841 , 0.3083862 , 0.6868038 ,\n         0.23764038, 0.7817228 , 0.9671384 , 0.06870162, 0.79873943,\n         0.66028714, 0.5871513 , 0.16461694, 0.7381023 , 0.32054043]],\n       dtype=float32)&gt;,\n TensorShape([2, 25]))"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html#operasi-tensor",
    "href": "posts/learn-tensorflow-1/index.html#operasi-tensor",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "Operasi Tensor",
    "text": "Operasi Tensor\nUntuk menjumlahkan, mengalikan dengan skalar, dan perkalian matriks, operator Python standar +, *, @ tetap bisa digunakan:\n\nprint(t1 + t2, '\\n')\nprint(t1 * 1/3, '\\n')\nprint(t1 @ t2, '\\n')\n\ntf.Tensor(\n[[ 6.  8.]\n [10. 12.]], shape=(2, 2), dtype=float32) \n\ntf.Tensor(\n[[0.33333334 0.6666667 ]\n [1.         1.3333334 ]], shape=(2, 2), dtype=float32) \n\ntf.Tensor(\n[[19. 22.]\n [43. 50.]], shape=(2, 2), dtype=float32) \n\n\n\nMeskipun demikian, best practice untuk melakukan operasi-operasi tersebut adalah dengan menggunakan fungsi-fungsi native Tensorflow, seperti tf.add, tf.multiply, dan tf.matmul:\n\nprint(tf.add(t1, t2), \"\\n\")\nprint(tf.multiply(t1, 1/3), \"\\n\")\nprint(tf.matmul(t1, t2), \"\\n\")\n\ntf.Tensor(\n[[ 6.  8.]\n [10. 12.]], shape=(2, 2), dtype=float32) \n\ntf.Tensor(\n[[0.33333334 0.6666667 ]\n [1.         1.3333334 ]], shape=(2, 2), dtype=float32) \n\ntf.Tensor(\n[[19. 22.]\n [43. 50.]], shape=(2, 2), dtype=float32)"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html#mengubah-data-type-tensor",
    "href": "posts/learn-tensorflow-1/index.html#mengubah-data-type-tensor",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "Mengubah data type tensor",
    "text": "Mengubah data type tensor\nSejauh ini, kita hanya bekerja dengan tensor ber-dtype int32. Mari kita membuat sebuah tensor bertipe float:\n\nt1 = tf.constant([[1,2], [3,4]], dtype=float)\nt2 = tf.constant([[5,6], [7,8]], dtype=float)\nt1, t2\n\n(&lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=\n array([[1., 2.],\n        [3., 4.]], dtype=float32)&gt;,\n &lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy=\n array([[5., 6.],\n        [7., 8.]], dtype=float32)&gt;)\n\n\nUntuk beberapa kasus, kita perlu mengubah tensor yang sudah ada menjadi data type yang lain. Untuk itu, kita bisa menggunakan fungsi tf.cast()\n\nimport numpy as np\n# Create a random tensor of values between -100 and 100 of size 50\nE = tf.constant(np.random.randint(-100,100,size = 50))\nE\n\n&lt;tf.Tensor: shape=(50,), dtype=int64, numpy=\narray([ 17,  10, -69, -39,  59, -76, -63,  65,  62,  12, -78, -80, -79,\n        14,  81,  54, -78,  70, -22,  13, -61, -59, -66, -89, -21, -66,\n       -98, -44,  64,  96,  96, -12, -28, -19, -56, -99, -77,  86, -94,\n        23,  90,  -2,  61, -96,  61, -18, -74, -17,  93,  42])&gt;\n\n\n\ntf.cast(E, dtype=tf.float32)\n\n&lt;tf.Tensor: shape=(50,), dtype=float32, numpy=\narray([ 17.,  10., -69., -39.,  59., -76., -63.,  65.,  62.,  12., -78.,\n       -80., -79.,  14.,  81.,  54., -78.,  70., -22.,  13., -61., -59.,\n       -66., -89., -21., -66., -98., -44.,  64.,  96.,  96., -12., -28.,\n       -19., -56., -99., -77.,  86., -94.,  23.,  90.,  -2.,  61., -96.,\n        61., -18., -74., -17.,  93.,  42.], dtype=float32)&gt;"
  },
  {
    "objectID": "posts/learn-tensorflow-1/index.html#agregasi-tensor",
    "href": "posts/learn-tensorflow-1/index.html#agregasi-tensor",
    "title": "TensorFlow Developer Certification (1/5): Dasar-Dasar TensorFlow",
    "section": "Agregasi Tensor",
    "text": "Agregasi Tensor\nUntuk mencari nilai min/max/mean/sum/variance dari suatu tensor, kita bisa menggunakan fungsi-fungsi reduksi berikut:\n\n# Create a random tensor of values between -100 and 100 of size 50\nE = tf.constant(np.random.randint(-100,100,size = 50))\nprint(E)\n\n# Find the minimum\nprint(\"Minimum: \", tf.reduce_min(E).numpy())\n\n# Find the maximum\nprint(\"Maximum: \", tf.reduce_max(E).numpy())\n\n# Find the average\nprint(\"Average: \", tf.reduce_mean(E).numpy())\n\n# Find the sum\nprint(\"Total: \", tf.reduce_sum(E).numpy())\n\n# Find the stdev and variance\n# Notice that we convert the tensor into float dtype here\nprint(\"Standard deviation: \", tf.math.reduce_std(tf.cast(E, dtype=tf.float32)).numpy())\nprint(\"Variance: \", tf.math.reduce_variance(tf.cast(E, dtype=tf.float32)).numpy())\n\n# Where the positional minimum and maximum of a tensor (argmin and argmax)\nprint(\"Positional minimum: \", tf.argmin(E).numpy())\nprint(\"Positional maximum: \", tf.argmax(E).numpy())\n\ntf.Tensor(\n[ 53  58 -96  79  55  27  -8   4  11  86 -96  73 -78 -42   5 -10 -53 -81\n -19  -5 -53 -46  96 -57  23 -61  89 -72  35 -55 -31  -6 -19  73  35  62\n  91  91  49 -54 -28 -48 -96 -78  35 -53   3  45 -82 -48], shape=(50,), dtype=int64)\nMinimum:  -96\nMaximum:  96\nAverage:  -3\nTotal:  -197\nStandard deviation:  58.411095\nVariance:  3411.8562\nPositional minimum:  2\nPositional maximum:  22"
  }
]